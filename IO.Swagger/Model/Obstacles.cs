/* 
 * API Escape Game
 *
 * Service web pour g√©rer les informations de EGC
 *
 * OpenAPI spec version: beta 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Obstacles
    /// </summary>
    [DataContract]
    public partial class Obstacles :  IEquatable<Obstacles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Obstacles" /> class.
        /// </summary>
        /// <param name="Typeobstacle">Typeobstacle.</param>
        public Obstacles(string Typeobstacle = default(string))
        {
            this.Typeobstacle = Typeobstacle;
        }
        
        /// <summary>
        /// Gets or Sets Idobstacle
        /// </summary>
        [DataMember(Name="idobstacle", EmitDefaultValue=false)]
        public int? Idobstacle { get; private set; }

        /// <summary>
        /// Gets or Sets Typeobstacle
        /// </summary>
        [DataMember(Name="typeobstacle", EmitDefaultValue=false)]
        public string Typeobstacle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Obstacles {\n");
            sb.Append("  Idobstacle: ").Append(Idobstacle).Append("\n");
            sb.Append("  Typeobstacle: ").Append(Typeobstacle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Obstacles);
        }

        /// <summary>
        /// Returns true if Obstacles instances are equal
        /// </summary>
        /// <param name="input">Instance of Obstacles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Obstacles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idobstacle == input.Idobstacle ||
                    (this.Idobstacle != null &&
                    this.Idobstacle.Equals(input.Idobstacle))
                ) && 
                (
                    this.Typeobstacle == input.Typeobstacle ||
                    (this.Typeobstacle != null &&
                    this.Typeobstacle.Equals(input.Typeobstacle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idobstacle != null)
                    hashCode = hashCode * 59 + this.Idobstacle.GetHashCode();
                if (this.Typeobstacle != null)
                    hashCode = hashCode * 59 + this.Typeobstacle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
