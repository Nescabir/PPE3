/* 
 * API Escape Game
 *
 * Service web pour g√©rer les informations de EGC
 *
 * OpenAPI spec version: beta 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Parties
    /// </summary>
    [DataContract]
    public partial class Parties :  IEquatable<Parties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Parties" /> class.
        /// </summary>
        /// <param name="Dateheuredebutpartie">Dateheuredebutpartie.</param>
        /// <param name="Dateheurefinpartie">Dateheurefinpartie.</param>
        /// <param name="Nombrejoueur">Nombrejoueur.</param>
        /// <param name="Nombreobstacles">Nombreobstacles.</param>
        /// <param name="Idjoueurpartie">Idjoueurpartie.</param>
        /// <param name="Idsalle">Idsalle.</param>
        public Parties(DateTime? Dateheuredebutpartie = default(DateTime?), DateTime? Dateheurefinpartie = default(DateTime?), int? Nombrejoueur = default(int?), int? Nombreobstacles = default(int?), string Idjoueurpartie = default(string), string Idsalle = default(string))
        {
            this.Dateheuredebutpartie = Dateheuredebutpartie;
            this.Dateheurefinpartie = Dateheurefinpartie;
            this.Nombrejoueur = Nombrejoueur;
            this.Nombreobstacles = Nombreobstacles;
            this.Idjoueurpartie = Idjoueurpartie;
            this.Idsalle = Idsalle;
        }
        
        /// <summary>
        /// Gets or Sets Idpartie
        /// </summary>
        [DataMember(Name="idpartie", EmitDefaultValue=false)]
        public int? Idpartie { get; private set; }

        /// <summary>
        /// Gets or Sets Dateheuredebutpartie
        /// </summary>
        [DataMember(Name="dateheuredebutpartie", EmitDefaultValue=false)]
        public DateTime? Dateheuredebutpartie { get; set; }

        /// <summary>
        /// Gets or Sets Dateheurefinpartie
        /// </summary>
        [DataMember(Name="dateheurefinpartie", EmitDefaultValue=false)]
        public DateTime? Dateheurefinpartie { get; set; }

        /// <summary>
        /// Gets or Sets Nombrejoueur
        /// </summary>
        [DataMember(Name="nombrejoueur", EmitDefaultValue=false)]
        public int? Nombrejoueur { get; set; }

        /// <summary>
        /// Gets or Sets Nombreobstacles
        /// </summary>
        [DataMember(Name="nombreobstacles", EmitDefaultValue=false)]
        public int? Nombreobstacles { get; set; }

        /// <summary>
        /// Gets or Sets Idjoueurpartie
        /// </summary>
        [DataMember(Name="idjoueurpartie", EmitDefaultValue=false)]
        public string Idjoueurpartie { get; set; }

        /// <summary>
        /// Gets or Sets Idsalle
        /// </summary>
        [DataMember(Name="idsalle", EmitDefaultValue=false)]
        public string Idsalle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Parties {\n");
            sb.Append("  Idpartie: ").Append(Idpartie).Append("\n");
            sb.Append("  Dateheuredebutpartie: ").Append(Dateheuredebutpartie).Append("\n");
            sb.Append("  Dateheurefinpartie: ").Append(Dateheurefinpartie).Append("\n");
            sb.Append("  Nombrejoueur: ").Append(Nombrejoueur).Append("\n");
            sb.Append("  Nombreobstacles: ").Append(Nombreobstacles).Append("\n");
            sb.Append("  Idjoueurpartie: ").Append(Idjoueurpartie).Append("\n");
            sb.Append("  Idsalle: ").Append(Idsalle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Parties);
        }

        /// <summary>
        /// Returns true if Parties instances are equal
        /// </summary>
        /// <param name="input">Instance of Parties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Parties input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idpartie == input.Idpartie ||
                    (this.Idpartie != null &&
                    this.Idpartie.Equals(input.Idpartie))
                ) && 
                (
                    this.Dateheuredebutpartie == input.Dateheuredebutpartie ||
                    (this.Dateheuredebutpartie != null &&
                    this.Dateheuredebutpartie.Equals(input.Dateheuredebutpartie))
                ) && 
                (
                    this.Dateheurefinpartie == input.Dateheurefinpartie ||
                    (this.Dateheurefinpartie != null &&
                    this.Dateheurefinpartie.Equals(input.Dateheurefinpartie))
                ) && 
                (
                    this.Nombrejoueur == input.Nombrejoueur ||
                    (this.Nombrejoueur != null &&
                    this.Nombrejoueur.Equals(input.Nombrejoueur))
                ) && 
                (
                    this.Nombreobstacles == input.Nombreobstacles ||
                    (this.Nombreobstacles != null &&
                    this.Nombreobstacles.Equals(input.Nombreobstacles))
                ) && 
                (
                    this.Idjoueurpartie == input.Idjoueurpartie ||
                    (this.Idjoueurpartie != null &&
                    this.Idjoueurpartie.Equals(input.Idjoueurpartie))
                ) && 
                (
                    this.Idsalle == input.Idsalle ||
                    (this.Idsalle != null &&
                    this.Idsalle.Equals(input.Idsalle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idpartie != null)
                    hashCode = hashCode * 59 + this.Idpartie.GetHashCode();
                if (this.Dateheuredebutpartie != null)
                    hashCode = hashCode * 59 + this.Dateheuredebutpartie.GetHashCode();
                if (this.Dateheurefinpartie != null)
                    hashCode = hashCode * 59 + this.Dateheurefinpartie.GetHashCode();
                if (this.Nombrejoueur != null)
                    hashCode = hashCode * 59 + this.Nombrejoueur.GetHashCode();
                if (this.Nombreobstacles != null)
                    hashCode = hashCode * 59 + this.Nombreobstacles.GetHashCode();
                if (this.Idjoueurpartie != null)
                    hashCode = hashCode * 59 + this.Idjoueurpartie.GetHashCode();
                if (this.Idsalle != null)
                    hashCode = hashCode * 59 + this.Idsalle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
