/* 
 * API Escape Game
 *
 * Service web pour g√©rer les informations de EGC
 *
 * OpenAPI spec version: beta 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompteArchive
    /// </summary>
    [DataContract]
    public partial class CompteArchive :  IEquatable<CompteArchive>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompteArchive" /> class.
        /// </summary>
        /// <param name="Idcomptejoueur">Idcomptejoueur.</param>
        /// <param name="Pseudojoueur">Pseudojoueur.</param>
        /// <param name="Numerocompte">Numerocompte.</param>
        public CompteArchive(int? Idcomptejoueur = default(int?), string Pseudojoueur = default(string), string Numerocompte = default(string))
        {
            this.Idcomptejoueur = Idcomptejoueur;
            this.Pseudojoueur = Pseudojoueur;
            this.Numerocompte = Numerocompte;
        }
        
        /// <summary>
        /// Gets or Sets Idcomptejoueur
        /// </summary>
        [DataMember(Name="idcomptejoueur", EmitDefaultValue=false)]
        public int? Idcomptejoueur { get; set; }

        /// <summary>
        /// Gets or Sets Pseudojoueur
        /// </summary>
        [DataMember(Name="pseudojoueur", EmitDefaultValue=false)]
        public string Pseudojoueur { get; set; }

        /// <summary>
        /// Gets or Sets Numerocompte
        /// </summary>
        [DataMember(Name="numerocompte", EmitDefaultValue=false)]
        public string Numerocompte { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompteArchive {\n");
            sb.Append("  Idcomptejoueur: ").Append(Idcomptejoueur).Append("\n");
            sb.Append("  Pseudojoueur: ").Append(Pseudojoueur).Append("\n");
            sb.Append("  Numerocompte: ").Append(Numerocompte).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompteArchive);
        }

        /// <summary>
        /// Returns true if CompteArchive instances are equal
        /// </summary>
        /// <param name="input">Instance of CompteArchive to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompteArchive input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idcomptejoueur == input.Idcomptejoueur ||
                    (this.Idcomptejoueur != null &&
                    this.Idcomptejoueur.Equals(input.Idcomptejoueur))
                ) && 
                (
                    this.Pseudojoueur == input.Pseudojoueur ||
                    (this.Pseudojoueur != null &&
                    this.Pseudojoueur.Equals(input.Pseudojoueur))
                ) && 
                (
                    this.Numerocompte == input.Numerocompte ||
                    (this.Numerocompte != null &&
                    this.Numerocompte.Equals(input.Numerocompte))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idcomptejoueur != null)
                    hashCode = hashCode * 59 + this.Idcomptejoueur.GetHashCode();
                if (this.Pseudojoueur != null)
                    hashCode = hashCode * 59 + this.Pseudojoueur.GetHashCode();
                if (this.Numerocompte != null)
                    hashCode = hashCode * 59 + this.Numerocompte.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
