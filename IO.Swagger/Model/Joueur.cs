/* 
 * API Escape Game
 *
 * Service web pour g√©rer les informations de EGC
 *
 * OpenAPI spec version: beta 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Joueur
    /// </summary>
    [DataContract]
    public partial class Joueur :  IEquatable<Joueur>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Joueur" /> class.
        /// </summary>
        /// <param name="Pseudo">Pseudo.</param>
        /// <param name="Nom">Nom.</param>
        /// <param name="Prenom">Prenom.</param>
        /// <param name="Datenaissance">Datenaissance.</param>
        /// <param name="Datecreation">Datecreation.</param>
        /// <param name="Numerotelephone">Numerotelephone.</param>
        /// <param name="Nombreparties">Nombreparties.</param>
        public Joueur(string Pseudo = default(string), string Nom = default(string), string Prenom = default(string), DateTime? Datenaissance = default(DateTime?), DateTime? Datecreation = default(DateTime?), string Numerotelephone = default(string), int? Nombreparties = default(int?))
        {
            this.Pseudo = Pseudo;
            this.Nom = Nom;
            this.Prenom = Prenom;
            this.Datenaissance = Datenaissance;
            this.Datecreation = Datecreation;
            this.Numerotelephone = Numerotelephone;
            this.Nombreparties = Nombreparties;
        }
        
        /// <summary>
        /// Gets or Sets Idjoueur
        /// </summary>
        [DataMember(Name="idjoueur", EmitDefaultValue=false)]
        public int? Idjoueur { get; private set; }

        /// <summary>
        /// Gets or Sets Pseudo
        /// </summary>
        [DataMember(Name="pseudo", EmitDefaultValue=false)]
        public string Pseudo { get; set; }

        /// <summary>
        /// Gets or Sets Nom
        /// </summary>
        [DataMember(Name="nom", EmitDefaultValue=false)]
        public string Nom { get; set; }

        /// <summary>
        /// Gets or Sets Prenom
        /// </summary>
        [DataMember(Name="prenom", EmitDefaultValue=false)]
        public string Prenom { get; set; }

        /// <summary>
        /// Gets or Sets Datenaissance
        /// </summary>
        [DataMember(Name="datenaissance", EmitDefaultValue=false)]
        public DateTime? Datenaissance { get; set; }

        /// <summary>
        /// Gets or Sets Datecreation
        /// </summary>
        [DataMember(Name="datecreation", EmitDefaultValue=false)]
        public DateTime? Datecreation { get; set; }

        /// <summary>
        /// Gets or Sets Numerotelephone
        /// </summary>
        [DataMember(Name="numerotelephone", EmitDefaultValue=false)]
        public string Numerotelephone { get; set; }

        /// <summary>
        /// Gets or Sets Nombreparties
        /// </summary>
        [DataMember(Name="nombreparties", EmitDefaultValue=false)]
        public int? Nombreparties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Joueur {\n");
            sb.Append("  Idjoueur: ").Append(Idjoueur).Append("\n");
            sb.Append("  Pseudo: ").Append(Pseudo).Append("\n");
            sb.Append("  Nom: ").Append(Nom).Append("\n");
            sb.Append("  Prenom: ").Append(Prenom).Append("\n");
            sb.Append("  Datenaissance: ").Append(Datenaissance).Append("\n");
            sb.Append("  Datecreation: ").Append(Datecreation).Append("\n");
            sb.Append("  Numerotelephone: ").Append(Numerotelephone).Append("\n");
            sb.Append("  Nombreparties: ").Append(Nombreparties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Joueur);
        }

        /// <summary>
        /// Returns true if Joueur instances are equal
        /// </summary>
        /// <param name="input">Instance of Joueur to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Joueur input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idjoueur == input.Idjoueur ||
                    (this.Idjoueur != null &&
                    this.Idjoueur.Equals(input.Idjoueur))
                ) && 
                (
                    this.Pseudo == input.Pseudo ||
                    (this.Pseudo != null &&
                    this.Pseudo.Equals(input.Pseudo))
                ) && 
                (
                    this.Nom == input.Nom ||
                    (this.Nom != null &&
                    this.Nom.Equals(input.Nom))
                ) && 
                (
                    this.Prenom == input.Prenom ||
                    (this.Prenom != null &&
                    this.Prenom.Equals(input.Prenom))
                ) && 
                (
                    this.Datenaissance == input.Datenaissance ||
                    (this.Datenaissance != null &&
                    this.Datenaissance.Equals(input.Datenaissance))
                ) && 
                (
                    this.Datecreation == input.Datecreation ||
                    (this.Datecreation != null &&
                    this.Datecreation.Equals(input.Datecreation))
                ) && 
                (
                    this.Numerotelephone == input.Numerotelephone ||
                    (this.Numerotelephone != null &&
                    this.Numerotelephone.Equals(input.Numerotelephone))
                ) && 
                (
                    this.Nombreparties == input.Nombreparties ||
                    (this.Nombreparties != null &&
                    this.Nombreparties.Equals(input.Nombreparties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idjoueur != null)
                    hashCode = hashCode * 59 + this.Idjoueur.GetHashCode();
                if (this.Pseudo != null)
                    hashCode = hashCode * 59 + this.Pseudo.GetHashCode();
                if (this.Nom != null)
                    hashCode = hashCode * 59 + this.Nom.GetHashCode();
                if (this.Prenom != null)
                    hashCode = hashCode * 59 + this.Prenom.GetHashCode();
                if (this.Datenaissance != null)
                    hashCode = hashCode * 59 + this.Datenaissance.GetHashCode();
                if (this.Datecreation != null)
                    hashCode = hashCode * 59 + this.Datecreation.GetHashCode();
                if (this.Numerotelephone != null)
                    hashCode = hashCode * 59 + this.Numerotelephone.GetHashCode();
                if (this.Nombreparties != null)
                    hashCode = hashCode * 59 + this.Nombreparties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
