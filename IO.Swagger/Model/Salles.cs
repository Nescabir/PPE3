/* 
 * API Escape Game
 *
 * Service web pour g√©rer les informations de EGC
 *
 * OpenAPI spec version: beta 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Salles
    /// </summary>
    [DataContract]
    public partial class Salles :  IEquatable<Salles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Salles" /> class.
        /// </summary>
        /// <param name="Ville">Ville.</param>
        /// <param name="Nomsalle">Nomsalle.</param>
        /// <param name="Theme">Theme.</param>
        /// <param name="Statut">Statut.</param>
        public Salles(string Ville = default(string), string Nomsalle = default(string), string Theme = default(string), bool? Statut = default(bool?))
        {
            this.Ville = Ville;
            this.Nomsalle = Nomsalle;
            this.Theme = Theme;
            this.Statut = Statut;
        }
        
        /// <summary>
        /// Gets or Sets Idsalle
        /// </summary>
        [DataMember(Name="idsalle", EmitDefaultValue=false)]
        public int? Idsalle { get; private set; }

        /// <summary>
        /// Gets or Sets Ville
        /// </summary>
        [DataMember(Name="ville", EmitDefaultValue=false)]
        public string Ville { get; set; }

        /// <summary>
        /// Gets or Sets Nomsalle
        /// </summary>
        [DataMember(Name="nomsalle", EmitDefaultValue=false)]
        public string Nomsalle { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name="theme", EmitDefaultValue=false)]
        public string Theme { get; set; }

        /// <summary>
        /// Gets or Sets Statut
        /// </summary>
        [DataMember(Name="statut", EmitDefaultValue=false)]
        public bool? Statut { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Salles {\n");
            sb.Append("  Idsalle: ").Append(Idsalle).Append("\n");
            sb.Append("  Ville: ").Append(Ville).Append("\n");
            sb.Append("  Nomsalle: ").Append(Nomsalle).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  Statut: ").Append(Statut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Salles);
        }

        /// <summary>
        /// Returns true if Salles instances are equal
        /// </summary>
        /// <param name="input">Instance of Salles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Salles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idsalle == input.Idsalle ||
                    (this.Idsalle != null &&
                    this.Idsalle.Equals(input.Idsalle))
                ) && 
                (
                    this.Ville == input.Ville ||
                    (this.Ville != null &&
                    this.Ville.Equals(input.Ville))
                ) && 
                (
                    this.Nomsalle == input.Nomsalle ||
                    (this.Nomsalle != null &&
                    this.Nomsalle.Equals(input.Nomsalle))
                ) && 
                (
                    this.Theme == input.Theme ||
                    (this.Theme != null &&
                    this.Theme.Equals(input.Theme))
                ) && 
                (
                    this.Statut == input.Statut ||
                    (this.Statut != null &&
                    this.Statut.Equals(input.Statut))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idsalle != null)
                    hashCode = hashCode * 59 + this.Idsalle.GetHashCode();
                if (this.Ville != null)
                    hashCode = hashCode * 59 + this.Ville.GetHashCode();
                if (this.Nomsalle != null)
                    hashCode = hashCode * 59 + this.Nomsalle.GetHashCode();
                if (this.Theme != null)
                    hashCode = hashCode * 59 + this.Theme.GetHashCode();
                if (this.Statut != null)
                    hashCode = hashCode * 59 + this.Statut.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
