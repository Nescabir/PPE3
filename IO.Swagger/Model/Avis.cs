/* 
 * API Escape Game
 *
 * Service web pour g√©rer les informations de EGC
 *
 * OpenAPI spec version: beta 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Avis
    /// </summary>
    [DataContract]
    public partial class Avis :  IEquatable<Avis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Avis" /> class.
        /// </summary>
        /// <param name="Pseudojoueur">Pseudojoueur.</param>
        /// <param name="Contenu">Contenu.</param>
        /// <param name="Dateavis">Dateavis.</param>
        /// <param name="Nombreetoile">Nombreetoile.</param>
        /// <param name="Idjoueur">Idjoueur.</param>
        /// <param name="IdSalle">IdSalle.</param>
        public Avis(string Pseudojoueur = default(string), string Contenu = default(string), DateTime? Dateavis = default(DateTime?), int? Nombreetoile = default(int?), string Idjoueur = default(string), string IdSalle = default(string))
        {
            this.Pseudojoueur = Pseudojoueur;
            this.Contenu = Contenu;
            this.Dateavis = Dateavis;
            this.Nombreetoile = Nombreetoile;
            this.Idjoueur = Idjoueur;
            this.IdSalle = IdSalle;
        }
        
        /// <summary>
        /// Gets or Sets Idavis
        /// </summary>
        [DataMember(Name="idavis", EmitDefaultValue=false)]
        public int? Idavis { get; private set; }

        /// <summary>
        /// Gets or Sets Pseudojoueur
        /// </summary>
        [DataMember(Name="pseudojoueur", EmitDefaultValue=false)]
        public string Pseudojoueur { get; set; }

        /// <summary>
        /// Gets or Sets Contenu
        /// </summary>
        [DataMember(Name="contenu", EmitDefaultValue=false)]
        public string Contenu { get; set; }

        /// <summary>
        /// Gets or Sets Dateavis
        /// </summary>
        [DataMember(Name="dateavis", EmitDefaultValue=false)]
        public DateTime? Dateavis { get; set; }

        /// <summary>
        /// Gets or Sets Nombreetoile
        /// </summary>
        [DataMember(Name="nombreetoile", EmitDefaultValue=false)]
        public int? Nombreetoile { get; set; }

        /// <summary>
        /// Gets or Sets Idjoueur
        /// </summary>
        [DataMember(Name="idjoueur", EmitDefaultValue=false)]
        public string Idjoueur { get; set; }

        /// <summary>
        /// Gets or Sets IdSalle
        /// </summary>
        [DataMember(Name="idSalle", EmitDefaultValue=false)]
        public string IdSalle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Avis {\n");
            sb.Append("  Idavis: ").Append(Idavis).Append("\n");
            sb.Append("  Pseudojoueur: ").Append(Pseudojoueur).Append("\n");
            sb.Append("  Contenu: ").Append(Contenu).Append("\n");
            sb.Append("  Dateavis: ").Append(Dateavis).Append("\n");
            sb.Append("  Nombreetoile: ").Append(Nombreetoile).Append("\n");
            sb.Append("  Idjoueur: ").Append(Idjoueur).Append("\n");
            sb.Append("  IdSalle: ").Append(IdSalle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Avis);
        }

        /// <summary>
        /// Returns true if Avis instances are equal
        /// </summary>
        /// <param name="input">Instance of Avis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Avis input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idavis == input.Idavis ||
                    (this.Idavis != null &&
                    this.Idavis.Equals(input.Idavis))
                ) && 
                (
                    this.Pseudojoueur == input.Pseudojoueur ||
                    (this.Pseudojoueur != null &&
                    this.Pseudojoueur.Equals(input.Pseudojoueur))
                ) && 
                (
                    this.Contenu == input.Contenu ||
                    (this.Contenu != null &&
                    this.Contenu.Equals(input.Contenu))
                ) && 
                (
                    this.Dateavis == input.Dateavis ||
                    (this.Dateavis != null &&
                    this.Dateavis.Equals(input.Dateavis))
                ) && 
                (
                    this.Nombreetoile == input.Nombreetoile ||
                    (this.Nombreetoile != null &&
                    this.Nombreetoile.Equals(input.Nombreetoile))
                ) && 
                (
                    this.Idjoueur == input.Idjoueur ||
                    (this.Idjoueur != null &&
                    this.Idjoueur.Equals(input.Idjoueur))
                ) && 
                (
                    this.IdSalle == input.IdSalle ||
                    (this.IdSalle != null &&
                    this.IdSalle.Equals(input.IdSalle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idavis != null)
                    hashCode = hashCode * 59 + this.Idavis.GetHashCode();
                if (this.Pseudojoueur != null)
                    hashCode = hashCode * 59 + this.Pseudojoueur.GetHashCode();
                if (this.Contenu != null)
                    hashCode = hashCode * 59 + this.Contenu.GetHashCode();
                if (this.Dateavis != null)
                    hashCode = hashCode * 59 + this.Dateavis.GetHashCode();
                if (this.Nombreetoile != null)
                    hashCode = hashCode * 59 + this.Nombreetoile.GetHashCode();
                if (this.Idjoueur != null)
                    hashCode = hashCode * 59 + this.Idjoueur.GetHashCode();
                if (this.IdSalle != null)
                    hashCode = hashCode * 59 + this.IdSalle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
