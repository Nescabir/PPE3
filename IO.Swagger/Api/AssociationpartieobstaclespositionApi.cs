/* 
 * API Escape Game
 *
 * Service web pour g√©rer les informations de EGC
 *
 * OpenAPI spec version: beta 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssociationpartieobstaclespositionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteAssociationpartieobstaclespositionItem (string id);

        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssociationpartieobstaclespositionItemWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>List&lt;Associationpartieobstaclesposition&gt;</returns>
        List<Associationpartieobstaclesposition> GetAssociationpartieobstaclespositionCollection (int? page = null);

        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>ApiResponse of List&lt;Associationpartieobstaclesposition&gt;</returns>
        ApiResponse<List<Associationpartieobstaclesposition>> GetAssociationpartieobstaclespositionCollectionWithHttpInfo (int? page = null);
        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Associationpartieobstaclesposition</returns>
        Associationpartieobstaclesposition GetAssociationpartieobstaclespositionItem (string id);

        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Associationpartieobstaclesposition</returns>
        ApiResponse<Associationpartieobstaclesposition> GetAssociationpartieobstaclespositionItemWithHttpInfo (string id);
        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Associationpartieobstaclesposition</returns>
        Associationpartieobstaclesposition PostAssociationpartieobstaclespositionCollection (Associationpartieobstaclesposition associationpartieobstaclesposition = null);

        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>ApiResponse of Associationpartieobstaclesposition</returns>
        ApiResponse<Associationpartieobstaclesposition> PostAssociationpartieobstaclespositionCollectionWithHttpInfo (Associationpartieobstaclesposition associationpartieobstaclesposition = null);
        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Associationpartieobstaclesposition</returns>
        Associationpartieobstaclesposition PutAssociationpartieobstaclespositionItem (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null);

        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>ApiResponse of Associationpartieobstaclesposition</returns>
        ApiResponse<Associationpartieobstaclesposition> PutAssociationpartieobstaclespositionItemWithHttpInfo (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssociationpartieobstaclespositionItemAsync (string id);

        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssociationpartieobstaclespositionItemAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>Task of List&lt;Associationpartieobstaclesposition&gt;</returns>
        System.Threading.Tasks.Task<List<Associationpartieobstaclesposition>> GetAssociationpartieobstaclespositionCollectionAsync (int? page = null);

        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Associationpartieobstaclesposition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Associationpartieobstaclesposition>>> GetAssociationpartieobstaclespositionCollectionAsyncWithHttpInfo (int? page = null);
        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Associationpartieobstaclesposition</returns>
        System.Threading.Tasks.Task<Associationpartieobstaclesposition> GetAssociationpartieobstaclespositionItemAsync (string id);

        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Associationpartieobstaclesposition)</returns>
        System.Threading.Tasks.Task<ApiResponse<Associationpartieobstaclesposition>> GetAssociationpartieobstaclespositionItemAsyncWithHttpInfo (string id);
        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of Associationpartieobstaclesposition</returns>
        System.Threading.Tasks.Task<Associationpartieobstaclesposition> PostAssociationpartieobstaclespositionCollectionAsync (Associationpartieobstaclesposition associationpartieobstaclesposition = null);

        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of ApiResponse (Associationpartieobstaclesposition)</returns>
        System.Threading.Tasks.Task<ApiResponse<Associationpartieobstaclesposition>> PostAssociationpartieobstaclespositionCollectionAsyncWithHttpInfo (Associationpartieobstaclesposition associationpartieobstaclesposition = null);
        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of Associationpartieobstaclesposition</returns>
        System.Threading.Tasks.Task<Associationpartieobstaclesposition> PutAssociationpartieobstaclespositionItemAsync (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null);

        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of ApiResponse (Associationpartieobstaclesposition)</returns>
        System.Threading.Tasks.Task<ApiResponse<Associationpartieobstaclesposition>> PutAssociationpartieobstaclespositionItemAsyncWithHttpInfo (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssociationpartieobstaclespositionApi : IAssociationpartieobstaclespositionApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationpartieobstaclespositionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssociationpartieobstaclespositionApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssociationpartieobstaclespositionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssociationpartieobstaclespositionApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteAssociationpartieobstaclespositionItem (string id)
        {
             DeleteAssociationpartieobstaclespositionItemWithHttpInfo(id);
        }

        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAssociationpartieobstaclespositionItemWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationpartieobstaclespositionApi->DeleteAssociationpartieobstaclespositionItem");

            var localVarPath = "/associationpartieobstaclespositions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssociationpartieobstaclespositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssociationpartieobstaclespositionItemAsync (string id)
        {
             await DeleteAssociationpartieobstaclespositionItemAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Removes the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssociationpartieobstaclespositionItemAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationpartieobstaclespositionApi->DeleteAssociationpartieobstaclespositionItem");

            var localVarPath = "/associationpartieobstaclespositions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssociationpartieobstaclespositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>List&lt;Associationpartieobstaclesposition&gt;</returns>
        public List<Associationpartieobstaclesposition> GetAssociationpartieobstaclespositionCollection (int? page = null)
        {
             ApiResponse<List<Associationpartieobstaclesposition>> localVarResponse = GetAssociationpartieobstaclespositionCollectionWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>ApiResponse of List&lt;Associationpartieobstaclesposition&gt;</returns>
        public ApiResponse< List<Associationpartieobstaclesposition> > GetAssociationpartieobstaclespositionCollectionWithHttpInfo (int? page = null)
        {

            var localVarPath = "/associationpartieobstaclespositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssociationpartieobstaclespositionCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Associationpartieobstaclesposition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Associationpartieobstaclesposition>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Associationpartieobstaclesposition>)));
        }

        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>Task of List&lt;Associationpartieobstaclesposition&gt;</returns>
        public async System.Threading.Tasks.Task<List<Associationpartieobstaclesposition>> GetAssociationpartieobstaclespositionCollectionAsync (int? page = null)
        {
             ApiResponse<List<Associationpartieobstaclesposition>> localVarResponse = await GetAssociationpartieobstaclespositionCollectionAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the collection of Associationpartieobstaclesposition resources. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The collection page number (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Associationpartieobstaclesposition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Associationpartieobstaclesposition>>> GetAssociationpartieobstaclespositionCollectionAsyncWithHttpInfo (int? page = null)
        {

            var localVarPath = "/associationpartieobstaclespositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssociationpartieobstaclespositionCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Associationpartieobstaclesposition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Associationpartieobstaclesposition>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Associationpartieobstaclesposition>)));
        }

        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Associationpartieobstaclesposition</returns>
        public Associationpartieobstaclesposition GetAssociationpartieobstaclespositionItem (string id)
        {
             ApiResponse<Associationpartieobstaclesposition> localVarResponse = GetAssociationpartieobstaclespositionItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Associationpartieobstaclesposition</returns>
        public ApiResponse< Associationpartieobstaclesposition > GetAssociationpartieobstaclespositionItemWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationpartieobstaclespositionApi->GetAssociationpartieobstaclespositionItem");

            var localVarPath = "/associationpartieobstaclespositions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssociationpartieobstaclespositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Associationpartieobstaclesposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Associationpartieobstaclesposition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Associationpartieobstaclesposition)));
        }

        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Associationpartieobstaclesposition</returns>
        public async System.Threading.Tasks.Task<Associationpartieobstaclesposition> GetAssociationpartieobstaclespositionItemAsync (string id)
        {
             ApiResponse<Associationpartieobstaclesposition> localVarResponse = await GetAssociationpartieobstaclespositionItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Associationpartieobstaclesposition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Associationpartieobstaclesposition>> GetAssociationpartieobstaclespositionItemAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationpartieobstaclespositionApi->GetAssociationpartieobstaclespositionItem");

            var localVarPath = "/associationpartieobstaclespositions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssociationpartieobstaclespositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Associationpartieobstaclesposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Associationpartieobstaclesposition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Associationpartieobstaclesposition)));
        }

        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Associationpartieobstaclesposition</returns>
        public Associationpartieobstaclesposition PostAssociationpartieobstaclespositionCollection (Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {
             ApiResponse<Associationpartieobstaclesposition> localVarResponse = PostAssociationpartieobstaclespositionCollectionWithHttpInfo(associationpartieobstaclesposition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>ApiResponse of Associationpartieobstaclesposition</returns>
        public ApiResponse< Associationpartieobstaclesposition > PostAssociationpartieobstaclespositionCollectionWithHttpInfo (Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {

            var localVarPath = "/associationpartieobstaclespositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (associationpartieobstaclesposition != null && associationpartieobstaclesposition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(associationpartieobstaclesposition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associationpartieobstaclesposition; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAssociationpartieobstaclespositionCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Associationpartieobstaclesposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Associationpartieobstaclesposition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Associationpartieobstaclesposition)));
        }

        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of Associationpartieobstaclesposition</returns>
        public async System.Threading.Tasks.Task<Associationpartieobstaclesposition> PostAssociationpartieobstaclespositionCollectionAsync (Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {
             ApiResponse<Associationpartieobstaclesposition> localVarResponse = await PostAssociationpartieobstaclespositionCollectionAsyncWithHttpInfo(associationpartieobstaclesposition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associationpartieobstaclesposition">The new Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of ApiResponse (Associationpartieobstaclesposition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Associationpartieobstaclesposition>> PostAssociationpartieobstaclespositionCollectionAsyncWithHttpInfo (Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {

            var localVarPath = "/associationpartieobstaclespositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (associationpartieobstaclesposition != null && associationpartieobstaclesposition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(associationpartieobstaclesposition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associationpartieobstaclesposition; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAssociationpartieobstaclespositionCollection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Associationpartieobstaclesposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Associationpartieobstaclesposition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Associationpartieobstaclesposition)));
        }

        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Associationpartieobstaclesposition</returns>
        public Associationpartieobstaclesposition PutAssociationpartieobstaclespositionItem (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {
             ApiResponse<Associationpartieobstaclesposition> localVarResponse = PutAssociationpartieobstaclespositionItemWithHttpInfo(id, associationpartieobstaclesposition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>ApiResponse of Associationpartieobstaclesposition</returns>
        public ApiResponse< Associationpartieobstaclesposition > PutAssociationpartieobstaclespositionItemWithHttpInfo (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationpartieobstaclespositionApi->PutAssociationpartieobstaclespositionItem");

            var localVarPath = "/associationpartieobstaclespositions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (associationpartieobstaclesposition != null && associationpartieobstaclesposition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(associationpartieobstaclesposition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associationpartieobstaclesposition; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssociationpartieobstaclespositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Associationpartieobstaclesposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Associationpartieobstaclesposition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Associationpartieobstaclesposition)));
        }

        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of Associationpartieobstaclesposition</returns>
        public async System.Threading.Tasks.Task<Associationpartieobstaclesposition> PutAssociationpartieobstaclespositionItemAsync (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {
             ApiResponse<Associationpartieobstaclesposition> localVarResponse = await PutAssociationpartieobstaclespositionItemAsyncWithHttpInfo(id, associationpartieobstaclesposition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces the Associationpartieobstaclesposition resource. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="associationpartieobstaclesposition">The updated Associationpartieobstaclesposition resource (optional)</param>
        /// <returns>Task of ApiResponse (Associationpartieobstaclesposition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Associationpartieobstaclesposition>> PutAssociationpartieobstaclespositionItemAsyncWithHttpInfo (string id, Associationpartieobstaclesposition associationpartieobstaclesposition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssociationpartieobstaclespositionApi->PutAssociationpartieobstaclespositionItem");

            var localVarPath = "/associationpartieobstaclespositions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (associationpartieobstaclesposition != null && associationpartieobstaclesposition.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(associationpartieobstaclesposition); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associationpartieobstaclesposition; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutAssociationpartieobstaclespositionItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Associationpartieobstaclesposition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Associationpartieobstaclesposition) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Associationpartieobstaclesposition)));
        }

    }
}
